<?php
/*
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace EasyBimehLandingLib\Tests;

use EasyBimehLandingLib\APIException;
use EasyBimehLandingLib\Exceptions;
use EasyBimehLandingLib\APIHelper;
use EasyBimehLandingLib\Models;

class ElectronicEquipmentInsuranceControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \EasyBimehLandingLib\Controllers\ElectronicEquipmentInsuranceController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \EasyBimehLandingLib\EasyBimehLandingClient();
        self::$controller = $client->getElectronicEquipmentInsurance();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * TODO: Add Description
     */
    public function testDiviceFranchisee()
    {
        // Parameters for the API call
        $deviceModelId = 1340;
        $xApiKey = 'd6dfd932-75d8-e911-811a-000c294ecf01';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getDiviceFranchisee($deviceModelId, $xApiKey);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Date'] = null ;
        $headers['Content-Type'] = null ;
        $headers['Transfer-Encoding'] = null ;
        $headers['Connection'] = null ;
        $headers['Keep-Alive'] = null ;
        $headers['Vary'] = null ;
        $headers['Cache-Control'] = null ;
        $headers['Pragma'] = null ;
        $headers['Expires'] = null ;
        $headers['X-StackifyID'] = null ;
        $headers['X-AspNet-Version'] = null ;
        $headers['X-Powered-By'] = null ;
        $headers['Server'] = null ;
        $headers['AR-PoweredBy'] = null ;
        $headers['ar-sid'] = null ;
        $headers['AR-ATIME'] = null ;
        $headers['AR-CACHE'] = null ;
        $headers['AR-Request-ID'] = null ;
        $headers['Content-Encoding'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                "{\r\n  \"isSuccess\": true,\r\n  \"status\": 200,\r\n  \"message\": [\r\n    {\r\n      \"id\": 5404" .
                ",\r\n      \"title\": \"30%\",\r\n      \"extraData\": null\r\n    },\r\n    {\r\n      \"id\": 5401" .
                ",\r\n      \"title\": \"40%\",\r\n      \"extraData\": null\r\n    }\r\n  ],\r\n  \"extraData\": nul" .
                "l,\r\n  \"exception\": null\r\n}",
                $this->httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
