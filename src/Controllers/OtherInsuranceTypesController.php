<?php
/*
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace EasyBimehLandingLib\Controllers;

use EasyBimehLandingLib\APIException;
use EasyBimehLandingLib\APIHelper;
use EasyBimehLandingLib\Configuration;
use EasyBimehLandingLib\Models;
use EasyBimehLandingLib\Exceptions;
use EasyBimehLandingLib\Http\HttpRequest;
use EasyBimehLandingLib\Http\HttpResponse;
use EasyBimehLandingLib\Http\HttpMethod;
use EasyBimehLandingLib\Http\HttpContext;
use EasyBimehLandingLib\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class OtherInsuranceTypesController extends BaseController
{
    /**
     * @var OtherInsuranceTypesController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return OtherInsuranceTypesController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * دریافت لیست سایر بیمه نامه ها
     *
     * @param string $subDomain دامنه یا زیر دامنه ی مرکز بیمه
     * @param string $xApiKey   کلید اختصاصی ارتباط با سرور
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getOtherInsuranceTypes(
        $subDomain,
        $xApiKey
    ) {

        //prepare query string for API call
        $_queryBuilder = '/ComboData/OtherInsuranceTypes';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'subDomain' => $subDomain,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'x-api-key'       => $xApiKey
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'EasyBimehLandingLib\\Models\\OtherInsuranceTypes');
    }

    /**
     * ارسال توکن تایید شماره تماس، برای احراز هویت کاربر
     *
     * @param string $mobile                   شماره موبایل
     * @param string $insuranceCentreSubDomain دامنه یا زیردامنه ی مرکز بیمه
     * @param string $xApiKey                  کلید اختصاصی ارتباط با سرور
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getSendSmsToken(
        $mobile,
        $insuranceCentreSubDomain,
        $xApiKey
    ) {

        //prepare query string for API call
        $_queryBuilder = '/Account/SendSmsToken';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'mobile'                   => $mobile,
            'insuranceCentreSubDomain' => $insuranceCentreSubDomain,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'             => BaseController::USER_AGENT,
            'Accept'                 => 'application/json',
            'x-api-key'                => $xApiKey
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'EasyBimehLandingLib\\Models\\SendSmsToken');
    }

    /**
     * تایید توکن پیامک شده به کاربر، برای احراز هویت
     *
     * @param string  $mobile                   شماره موبایل
     * @param integer $token                    توکن دریافتی کاربر از پیامک
     * @param string  $insuranceCentreSubDomain دامنه یا زیر دامنه ی اختصاصی مرکز بیمه
     * @param string  $aliasName                نام و نام خانوادگی کاربر
     * @param string  $resource                 دامنه ی درخواست دهنده
     * @param string  $xApiKey                  کلید اختصاصی ارتباط با سرور
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getVerifySmsToken(
        $mobile,
        $token,
        $insuranceCentreSubDomain,
        $aliasName,
        $resource,
        $xApiKey
    ) {

        //prepare query string for API call
        $_queryBuilder = '/Account/verifySmsToken';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'mobile'                   => $mobile,
            'token'                    => $token,
            'insuranceCentreSubDomain' => $insuranceCentreSubDomain,
            'aliasName'                => $aliasName,
            'resource'                 => $resource,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'             => BaseController::USER_AGENT,
            'Accept'                 => 'application/json',
            'x-api-key'                => $xApiKey
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\Status400Exception('Bad Request', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'EasyBimehLandingLib\\Models\\Status200');
    }
}
